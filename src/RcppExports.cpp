// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <RcppEigen.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// fVBmlr
Rcpp::List fVBmlr(arma::mat D, arma::mat X, Rcpp::List hyper, int maxIter, double Tol_ELBO, double Tol_Par, int Trace);
RcppExport SEXP _vbmlr_fVBmlr(SEXP DSEXP, SEXP XSEXP, SEXP hyperSEXP, SEXP maxIterSEXP, SEXP Tol_ELBOSEXP, SEXP Tol_ParSEXP, SEXP TraceSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type D(DSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type X(XSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type hyper(hyperSEXP);
    Rcpp::traits::input_parameter< int >::type maxIter(maxIterSEXP);
    Rcpp::traits::input_parameter< double >::type Tol_ELBO(Tol_ELBOSEXP);
    Rcpp::traits::input_parameter< double >::type Tol_Par(Tol_ParSEXP);
    Rcpp::traits::input_parameter< int >::type Trace(TraceSEXP);
    rcpp_result_gen = Rcpp::wrap(fVBmlr(D, X, hyper, maxIter, Tol_ELBO, Tol_Par, Trace));
    return rcpp_result_gen;
END_RCPP
}
// fVBmlrL
Rcpp::List fVBmlrL(arma::mat D, arma::mat X, Rcpp::List hyper, int maxIter, double Tol_ELBO, double Tol_Par, int Trace);
RcppExport SEXP _vbmlr_fVBmlrL(SEXP DSEXP, SEXP XSEXP, SEXP hyperSEXP, SEXP maxIterSEXP, SEXP Tol_ELBOSEXP, SEXP Tol_ParSEXP, SEXP TraceSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type D(DSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type X(XSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type hyper(hyperSEXP);
    Rcpp::traits::input_parameter< int >::type maxIter(maxIterSEXP);
    Rcpp::traits::input_parameter< double >::type Tol_ELBO(Tol_ELBOSEXP);
    Rcpp::traits::input_parameter< double >::type Tol_Par(Tol_ParSEXP);
    Rcpp::traits::input_parameter< int >::type Trace(TraceSEXP);
    rcpp_result_gen = Rcpp::wrap(fVBmlrL(D, X, hyper, maxIter, Tol_ELBO, Tol_Par, Trace));
    return rcpp_result_gen;
END_RCPP
}
// fVBmlrNG
Rcpp::List fVBmlrNG(arma::mat D, arma::mat X, Rcpp::List hyper, int maxIter, double Tol_ELBO, double Tol_Par, int Trace);
RcppExport SEXP _vbmlr_fVBmlrNG(SEXP DSEXP, SEXP XSEXP, SEXP hyperSEXP, SEXP maxIterSEXP, SEXP Tol_ELBOSEXP, SEXP Tol_ParSEXP, SEXP TraceSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type D(DSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type X(XSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type hyper(hyperSEXP);
    Rcpp::traits::input_parameter< int >::type maxIter(maxIterSEXP);
    Rcpp::traits::input_parameter< double >::type Tol_ELBO(Tol_ELBOSEXP);
    Rcpp::traits::input_parameter< double >::type Tol_Par(Tol_ParSEXP);
    Rcpp::traits::input_parameter< int >::type Trace(TraceSEXP);
    rcpp_result_gen = Rcpp::wrap(fVBmlrNG(D, X, hyper, maxIter, Tol_ELBO, Tol_Par, Trace));
    return rcpp_result_gen;
END_RCPP
}
// fVBmlrHS
Rcpp::List fVBmlrHS(arma::mat D, arma::mat X, Rcpp::List hyper, int maxIter, double Tol_ELBO, double Tol_Par, int Trace);
RcppExport SEXP _vbmlr_fVBmlrHS(SEXP DSEXP, SEXP XSEXP, SEXP hyperSEXP, SEXP maxIterSEXP, SEXP Tol_ELBOSEXP, SEXP Tol_ParSEXP, SEXP TraceSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type D(DSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type X(XSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type hyper(hyperSEXP);
    Rcpp::traits::input_parameter< int >::type maxIter(maxIterSEXP);
    Rcpp::traits::input_parameter< double >::type Tol_ELBO(Tol_ELBOSEXP);
    Rcpp::traits::input_parameter< double >::type Tol_Par(Tol_ParSEXP);
    Rcpp::traits::input_parameter< int >::type Trace(TraceSEXP);
    rcpp_result_gen = Rcpp::wrap(fVBmlrHS(D, X, hyper, maxIter, Tol_ELBO, Tol_Par, Trace));
    return rcpp_result_gen;
END_RCPP
}
// fVBmlrSV
Rcpp::List fVBmlrSV(arma::mat D, arma::mat X, Rcpp::List hyper, int maxIter, double Tol_ELBO, double Tol_Par, int Trace);
RcppExport SEXP _vbmlr_fVBmlrSV(SEXP DSEXP, SEXP XSEXP, SEXP hyperSEXP, SEXP maxIterSEXP, SEXP Tol_ELBOSEXP, SEXP Tol_ParSEXP, SEXP TraceSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type D(DSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type X(XSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type hyper(hyperSEXP);
    Rcpp::traits::input_parameter< int >::type maxIter(maxIterSEXP);
    Rcpp::traits::input_parameter< double >::type Tol_ELBO(Tol_ELBOSEXP);
    Rcpp::traits::input_parameter< double >::type Tol_Par(Tol_ParSEXP);
    Rcpp::traits::input_parameter< int >::type Trace(TraceSEXP);
    rcpp_result_gen = Rcpp::wrap(fVBmlrSV(D, X, hyper, maxIter, Tol_ELBO, Tol_Par, Trace));
    return rcpp_result_gen;
END_RCPP
}
// fVBmlrSVL
Rcpp::List fVBmlrSVL(arma::mat D, arma::mat X, Rcpp::List hyper, int maxIter, double Tol_ELBO, double Tol_Par, int Trace);
RcppExport SEXP _vbmlr_fVBmlrSVL(SEXP DSEXP, SEXP XSEXP, SEXP hyperSEXP, SEXP maxIterSEXP, SEXP Tol_ELBOSEXP, SEXP Tol_ParSEXP, SEXP TraceSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type D(DSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type X(XSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type hyper(hyperSEXP);
    Rcpp::traits::input_parameter< int >::type maxIter(maxIterSEXP);
    Rcpp::traits::input_parameter< double >::type Tol_ELBO(Tol_ELBOSEXP);
    Rcpp::traits::input_parameter< double >::type Tol_Par(Tol_ParSEXP);
    Rcpp::traits::input_parameter< int >::type Trace(TraceSEXP);
    rcpp_result_gen = Rcpp::wrap(fVBmlrSVL(D, X, hyper, maxIter, Tol_ELBO, Tol_Par, Trace));
    return rcpp_result_gen;
END_RCPP
}
// fVBmlrSVNG
Rcpp::List fVBmlrSVNG(arma::mat D, arma::mat X, Rcpp::List hyper, int maxIter, double Tol_ELBO, double Tol_Par, int Trace);
RcppExport SEXP _vbmlr_fVBmlrSVNG(SEXP DSEXP, SEXP XSEXP, SEXP hyperSEXP, SEXP maxIterSEXP, SEXP Tol_ELBOSEXP, SEXP Tol_ParSEXP, SEXP TraceSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type D(DSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type X(XSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type hyper(hyperSEXP);
    Rcpp::traits::input_parameter< int >::type maxIter(maxIterSEXP);
    Rcpp::traits::input_parameter< double >::type Tol_ELBO(Tol_ELBOSEXP);
    Rcpp::traits::input_parameter< double >::type Tol_Par(Tol_ParSEXP);
    Rcpp::traits::input_parameter< int >::type Trace(TraceSEXP);
    rcpp_result_gen = Rcpp::wrap(fVBmlrSVNG(D, X, hyper, maxIter, Tol_ELBO, Tol_Par, Trace));
    return rcpp_result_gen;
END_RCPP
}
// fVBmlrSVHS
Rcpp::List fVBmlrSVHS(arma::mat D, arma::mat X, Rcpp::List hyper, int maxIter, double Tol_ELBO, double Tol_Par, int Trace);
RcppExport SEXP _vbmlr_fVBmlrSVHS(SEXP DSEXP, SEXP XSEXP, SEXP hyperSEXP, SEXP maxIterSEXP, SEXP Tol_ELBOSEXP, SEXP Tol_ParSEXP, SEXP TraceSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type D(DSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type X(XSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type hyper(hyperSEXP);
    Rcpp::traits::input_parameter< int >::type maxIter(maxIterSEXP);
    Rcpp::traits::input_parameter< double >::type Tol_ELBO(Tol_ELBOSEXP);
    Rcpp::traits::input_parameter< double >::type Tol_Par(Tol_ParSEXP);
    Rcpp::traits::input_parameter< int >::type Trace(TraceSEXP);
    rcpp_result_gen = Rcpp::wrap(fVBmlrSVHS(D, X, hyper, maxIter, Tol_ELBO, Tol_Par, Trace));
    return rcpp_result_gen;
END_RCPP
}
// ran_mlr
Rcpp::List ran_mlr(int n, Rcpp::List params, int nburn, int seed_set);
RcppExport SEXP _vbmlr_ran_mlr(SEXP nSEXP, SEXP paramsSEXP, SEXP nburnSEXP, SEXP seed_setSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type params(paramsSEXP);
    Rcpp::traits::input_parameter< int >::type nburn(nburnSEXP);
    Rcpp::traits::input_parameter< int >::type seed_set(seed_setSEXP);
    rcpp_result_gen = Rcpp::wrap(ran_mlr(n, params, nburn, seed_set));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_vbmlr_fVBmlr", (DL_FUNC) &_vbmlr_fVBmlr, 7},
    {"_vbmlr_fVBmlrL", (DL_FUNC) &_vbmlr_fVBmlrL, 7},
    {"_vbmlr_fVBmlrNG", (DL_FUNC) &_vbmlr_fVBmlrNG, 7},
    {"_vbmlr_fVBmlrHS", (DL_FUNC) &_vbmlr_fVBmlrHS, 7},
    {"_vbmlr_fVBmlrSV", (DL_FUNC) &_vbmlr_fVBmlrSV, 7},
    {"_vbmlr_fVBmlrSVL", (DL_FUNC) &_vbmlr_fVBmlrSVL, 7},
    {"_vbmlr_fVBmlrSVNG", (DL_FUNC) &_vbmlr_fVBmlrSVNG, 7},
    {"_vbmlr_fVBmlrSVHS", (DL_FUNC) &_vbmlr_fVBmlrSVHS, 7},
    {"_vbmlr_ran_mlr", (DL_FUNC) &_vbmlr_ran_mlr, 4},
    {NULL, NULL, 0}
};

RcppExport void R_init_vbmlr(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
